// Code generated by protoc-gen-go.
// source: example.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	SayRequest
	Recipient
	SayReply
	MessageWithBytes
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GreetingType int32

const (
	GreetingType_Salutation GreetingType = 0
	GreetingType_Farewell   GreetingType = 1
)

var GreetingType_name = map[int32]string{
	0: "Salutation",
	1: "Farewell",
}
var GreetingType_value = map[string]int32{
	"Salutation": 0,
	"Farewell":   1,
}

func (x GreetingType) String() string {
	return proto.EnumName(GreetingType_name, int32(x))
}
func (GreetingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SayRequest struct {
	SayWhat      string       `protobuf:"bytes,1,opt,name=sayWhat" json:"sayWhat,omitempty"`
	Recipient    *Recipient   `protobuf:"bytes,2,opt,name=recipient" json:"recipient,omitempty"`
	GreetingType GreetingType `protobuf:"varint,3,opt,name=GreetingType,json=greetingType,enum=main.GreetingType" json:"GreetingType,omitempty"`
}

func (m *SayRequest) Reset()                    { *m = SayRequest{} }
func (m *SayRequest) String() string            { return proto.CompactTextString(m) }
func (*SayRequest) ProtoMessage()               {}
func (*SayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SayRequest) GetSayWhat() string {
	if m != nil {
		return m.SayWhat
	}
	return ""
}

func (m *SayRequest) GetRecipient() *Recipient {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *SayRequest) GetGreetingType() GreetingType {
	if m != nil {
		return m.GreetingType
	}
	return GreetingType_Salutation
}

type Recipient struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NumberOfTimes int32  `protobuf:"varint,2,opt,name=numberOfTimes" json:"numberOfTimes,omitempty"`
}

func (m *Recipient) Reset()                    { *m = Recipient{} }
func (m *Recipient) String() string            { return proto.CompactTextString(m) }
func (*Recipient) ProtoMessage()               {}
func (*Recipient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Recipient) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Recipient) GetNumberOfTimes() int32 {
	if m != nil {
		return m.NumberOfTimes
	}
	return 0
}

type SayReply struct {
	SaidWhat string `protobuf:"bytes,1,opt,name=saidWhat" json:"saidWhat,omitempty"`
}

func (m *SayReply) Reset()                    { *m = SayReply{} }
func (m *SayReply) String() string            { return proto.CompactTextString(m) }
func (*SayReply) ProtoMessage()               {}
func (*SayReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SayReply) GetSaidWhat() string {
	if m != nil {
		return m.SaidWhat
	}
	return ""
}

type MessageWithBytes struct {
	Bytes []byte `protobuf:"bytes,1,opt,name=Bytes,json=bytes,proto3" json:"Bytes,omitempty"`
}

func (m *MessageWithBytes) Reset()                    { *m = MessageWithBytes{} }
func (m *MessageWithBytes) String() string            { return proto.CompactTextString(m) }
func (*MessageWithBytes) ProtoMessage()               {}
func (*MessageWithBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MessageWithBytes) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func init() {
	proto.RegisterType((*SayRequest)(nil), "main.SayRequest")
	proto.RegisterType((*Recipient)(nil), "main.Recipient")
	proto.RegisterType((*SayReply)(nil), "main.SayReply")
	proto.RegisterType((*MessageWithBytes)(nil), "main.MessageWithBytes")
	proto.RegisterEnum("main.GreetingType", GreetingType_name, GreetingType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExampleService service

type ExampleServiceClient interface {
	SayHello(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error)
	SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_SayHelloStreamClient, error)
	Bytes(ctx context.Context, in *MessageWithBytes, opts ...grpc.CallOption) (*MessageWithBytes, error)
	ReturnsUnimplementedCode(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error)
}

type exampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewExampleServiceClient(cc *grpc.ClientConn) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) SayHello(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error) {
	out := new(SayReply)
	err := grpc.Invoke(ctx, "/main.ExampleService/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_SayHelloStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExampleService_serviceDesc.Streams[0], c.cc, "/main.ExampleService/SayHelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceSayHelloStreamClient{stream}
	return x, nil
}

type ExampleService_SayHelloStreamClient interface {
	Send(*SayRequest) error
	Recv() (*SayReply, error)
	grpc.ClientStream
}

type exampleServiceSayHelloStreamClient struct {
	grpc.ClientStream
}

func (x *exampleServiceSayHelloStreamClient) Send(m *SayRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServiceSayHelloStreamClient) Recv() (*SayReply, error) {
	m := new(SayReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleServiceClient) Bytes(ctx context.Context, in *MessageWithBytes, opts ...grpc.CallOption) (*MessageWithBytes, error) {
	out := new(MessageWithBytes)
	err := grpc.Invoke(ctx, "/main.ExampleService/Bytes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) ReturnsUnimplementedCode(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error) {
	out := new(SayReply)
	err := grpc.Invoke(ctx, "/main.ExampleService/ReturnsUnimplementedCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExampleService service

type ExampleServiceServer interface {
	SayHello(context.Context, *SayRequest) (*SayReply, error)
	SayHelloStream(ExampleService_SayHelloStreamServer) error
	Bytes(context.Context, *MessageWithBytes) (*MessageWithBytes, error)
	ReturnsUnimplementedCode(context.Context, *SayRequest) (*SayReply, error)
}

func RegisterExampleServiceServer(s *grpc.Server, srv ExampleServiceServer) {
	s.RegisterService(&_ExampleService_serviceDesc, srv)
}

func _ExampleService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ExampleService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).SayHello(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_SayHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).SayHelloStream(&exampleServiceSayHelloStreamServer{stream})
}

type ExampleService_SayHelloStreamServer interface {
	Send(*SayReply) error
	Recv() (*SayRequest, error)
	grpc.ServerStream
}

type exampleServiceSayHelloStreamServer struct {
	grpc.ServerStream
}

func (x *exampleServiceSayHelloStreamServer) Send(m *SayReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServiceSayHelloStreamServer) Recv() (*SayRequest, error) {
	m := new(SayRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExampleService_Bytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageWithBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).Bytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ExampleService/Bytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).Bytes(ctx, req.(*MessageWithBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_ReturnsUnimplementedCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).ReturnsUnimplementedCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ExampleService/ReturnsUnimplementedCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).ReturnsUnimplementedCode(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ExampleService_SayHello_Handler,
		},
		{
			MethodName: "Bytes",
			Handler:    _ExampleService_Bytes_Handler,
		},
		{
			MethodName: "ReturnsUnimplementedCode",
			Handler:    _ExampleService_ReturnsUnimplementedCode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStream",
			Handler:       _ExampleService_SayHelloStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}

func init() { proto.RegisterFile("example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x0b, 0xd3, 0x30,
	0x14, 0x5d, 0xf6, 0xa1, 0xdd, 0xb5, 0xab, 0xe5, 0x22, 0x52, 0xf6, 0x34, 0x8a, 0x48, 0x11, 0x2d,
	0x32, 0x41, 0xf4, 0xc5, 0x07, 0x65, 0x2a, 0x82, 0x08, 0xd9, 0x64, 0xcf, 0xd9, 0x76, 0xdd, 0x02,
	0x69, 0x5a, 0x93, 0x54, 0xed, 0x8f, 0xf0, 0xe7, 0xfa, 0x2e, 0x6d, 0xf7, 0xd1, 0x09, 0xc2, 0xde,
	0xee, 0x39, 0xf7, 0x23, 0xe7, 0x1c, 0x02, 0x13, 0xfa, 0x25, 0xb2, 0x42, 0x51, 0x5a, 0x98, 0xdc,
	0xe5, 0x38, 0xcc, 0x84, 0xd4, 0xf1, 0x6f, 0x06, 0xb0, 0x14, 0x15, 0xa7, 0xef, 0x25, 0x59, 0x87,
	0x11, 0xdc, 0xb5, 0xa2, 0x5a, 0x1f, 0x84, 0x8b, 0xd8, 0x8c, 0x25, 0x63, 0x7e, 0x82, 0xf8, 0x0c,
	0xc6, 0x86, 0xb6, 0xb2, 0x90, 0xa4, 0x5d, 0xd4, 0x9f, 0xb1, 0xe4, 0xde, 0xfc, 0x7e, 0x5a, 0x9f,
	0x48, 0xf9, 0x89, 0xe6, 0x97, 0x09, 0x7c, 0x09, 0xfe, 0x07, 0x43, 0xe4, 0xa4, 0xde, 0xaf, 0xaa,
	0x82, 0xa2, 0xc1, 0x8c, 0x25, 0xc1, 0x1c, 0xdb, 0x8d, 0x6e, 0x87, 0xfb, 0xfb, 0x0e, 0x8a, 0x17,
	0x30, 0x3e, 0xdf, 0x43, 0x84, 0xa1, 0x16, 0x19, 0x1d, 0xa5, 0x34, 0x35, 0x3e, 0x82, 0x89, 0x2e,
	0xb3, 0x0d, 0x99, 0x2f, 0xdf, 0x56, 0x32, 0x23, 0xdb, 0x68, 0x19, 0xf1, 0x6b, 0x32, 0x7e, 0x0c,
	0x5e, 0xe3, 0xaa, 0x50, 0x15, 0x4e, 0xc1, 0xb3, 0x42, 0xee, 0x3a, 0xa6, 0xce, 0x38, 0x4e, 0x21,
	0xfc, 0x4c, 0xd6, 0x8a, 0x3d, 0xad, 0xa5, 0x3b, 0xbc, 0xad, 0x1c, 0x59, 0x7c, 0x00, 0xa3, 0xa6,
	0x68, 0x86, 0x7d, 0x3e, 0xda, 0xd4, 0xe0, 0xd3, 0xd0, 0xeb, 0x87, 0x83, 0x27, 0x4f, 0xaf, 0x6d,
	0x61, 0x50, 0xa7, 0xa7, 0x4a, 0x27, 0x9c, 0xcc, 0x75, 0xd8, 0x43, 0x1f, 0xbc, 0xf7, 0xc2, 0xd0,
	0x4f, 0x52, 0x2a, 0x64, 0xf3, 0x3f, 0x0c, 0x82, 0x45, 0x1b, 0xfa, 0x92, 0xcc, 0x0f, 0xb9, 0x25,
	0x4c, 0x1b, 0x61, 0x1f, 0x49, 0xa9, 0x1c, 0xc3, 0x36, 0x8d, 0x4b, 0xfc, 0xd3, 0xa0, 0xc3, 0x14,
	0xaa, 0x8a, 0x7b, 0xf8, 0x0a, 0x82, 0xd3, 0xfc, 0xd2, 0x19, 0x12, 0xd9, 0x2d, 0x5b, 0x09, 0x7b,
	0xce, 0xf0, 0xf5, 0xd1, 0x06, 0x3e, 0x6c, 0xdb, 0xff, 0xfa, 0x9c, 0xfe, 0x87, 0x8f, 0x7b, 0xf8,
	0x06, 0x22, 0x4e, 0xae, 0x34, 0xda, 0x7e, 0xd5, 0xb2, 0x56, 0x9f, 0x91, 0x76, 0xb4, 0x7b, 0x97,
	0xef, 0xe8, 0x96, 0xe7, 0x37, 0x77, 0x9a, 0x1f, 0xf6, 0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x49, 0xbb, 0x94, 0xdb, 0x72, 0x02, 0x00, 0x00,
}
