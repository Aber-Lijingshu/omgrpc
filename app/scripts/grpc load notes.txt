There is a very basic mechanism in place to override the default behavior when importing files, like this:


var root = new protobuf.Root();
root.resolvePath = function(origin, target) {
   if (/\/google\/api\//.test(target))
      return null; // ignored
   return protobuf.util.path.resolve(origin, target); // default
})
root.load( .... )


https://github.com/dcodeIO/protobuf.js/blob/master/cli/pbjs.js#L161
https://github.com/dcodeIO/protobuf.js/blob/master/tests/api_common.js

https://github.com/grpc/grpc/issues/9591


// old method
grpc.load
	builder = ProtoBuf.loadProtoFile(filename);
	return loadObject(builder.ns, options);

// new method

grpc.loadObject instead of load

addProtoService is now deprecated, and addService should be used instead

(typeof obj.root === 'object') && (typeof obj.resolve === 'function')


var ProtoBuf = require('protobufjs');

/*
        try {
            var rootPB = new ProtoBuf.Root();

            // http://dcode.io/protobuf.js/Root.html#resolvePath
            /*rootPB.resolvePath = function(origin, target) {
               alert(origin);
               alert(target);
               return ''; // or null
            }*/
/*
            var fn = root+"/"+relPath;
            alert(fn);

            rootPB.loadSync(fn);

            alert('loading into grpc object');
            alert(rootPB);
            
            let parsed = grpc.loadObject(rootPB);
            console.log(parsed);
            return parsed;

        } catch (e) {
            alert('Error:' + e);
        }
*/